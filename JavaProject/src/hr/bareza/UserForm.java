/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hr.bareza;

import hr.bareza.dal.Repository;
import hr.bareza.dal.RepositoryFactory;
import hr.bareza.models.Genre;
import hr.bareza.models.GenreTransferable;
import hr.bareza.models.Movie;
import hr.bareza.models.MovieArchive;
import hr.bareza.models.MovieTableModel;
import hr.bareza.models.Person;
import hr.bareza.models.PersonTransferable;
import hr.bareza.utils.IconUtils;
import hr.bareza.utils.JAXBUtils;
import hr.bareza.utils.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.TransferHandler;
import static javax.swing.TransferHandler.COPY;
import javax.swing.text.JTextComponent;

/**
 *
 * @author Bareza
 */
public class UserForm extends javax.swing.JFrame {

    private Repository repository;
    private MovieTableModel movieTableModel;
    
    private List<JLabel> errorLabels;
    private List<JTextComponent> validationFields;
    
    private Movie selectedMovie;
    private Genre selectedGenre;
    private Person selectedArtist;
    private Person selectedActor;
    private Person selectedDirector;

    public Genre getSelectedGenre() {
        return selectedGenre;
    }

    public Person getSelectedArtist() {
        return selectedArtist;
    }

    private final DefaultListModel<Person> actorModel = new DefaultListModel<>();
    private final DefaultListModel<Person> directorModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> genreModel = new DefaultListModel<>();
    private final DefaultListModel<Person> allArtistsModel = new DefaultListModel<>();
    private final DefaultListModel<Genre> allGenresModel = new DefaultListModel<>();
    
    private static final String XML_FILENAME = "movieArchive.xml";
    
    /*private List<Person> newActors;
    private List<Person> newDirectors;
    private List<Genre> newGenreMovies;*/
    
    /**
     * Creates new form User
     */
    public UserForm() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblIcon = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        taDescription = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsActors = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        lsDirectors = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        lsGenres = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        lsAllArtists = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        lsAllGenres = new javax.swing.JList<>();
        btnUpdateMovie = new javax.swing.JButton();
        btnDeleteMovie = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMovies = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        tfTitle = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        tfOriginalTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfPublishedDate = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        tfPicturePath = new javax.swing.JTextField();
        tfLink = new javax.swing.JTextField();
        lblTitleError = new javax.swing.JLabel();
        lblOriginalTitleError = new javax.swing.JLabel();
        lblDatePublishedError = new javax.swing.JLabel();
        lblPicturePathError = new javax.swing.JLabel();
        lblLinkError = new javax.swing.JLabel();
        lblDescriptionError = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        tfDuration = new javax.swing.JTextField();
        lblDurationError = new javax.swing.JLabel();
        btnRemoveActor = new javax.swing.JButton();
        btnRemoveGenre = new javax.swing.JButton();
        btnRemoveDirector = new javax.swing.JButton();
        btnDeleteArtist = new javax.swing.JButton();
        btnDeleteGenre = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miNewMovie = new javax.swing.JMenuItem();
        miNewActor = new javax.swing.JMenuItem();
        miNewDirector = new javax.swing.JMenuItem();
        miNewGenre = new javax.swing.JMenuItem();
        miExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        miEditArtist = new javax.swing.JMenuItem();
        miEditGenre = new javax.swing.JMenuItem();
        miExport = new javax.swing.JMenu();
        miImport = new javax.swing.JMenuItem();
        miExportInXml = new javax.swing.JMenuItem();
        menuAdmin = new javax.swing.JMenu();
        miAdminWindow = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("User");
        setResizable(false);

        lblIcon.setIcon(new javax.swing.ImageIcon("C:\\Users\\Bareza\\OneDrive - Visoko uciliste Algebra\\4.  Semestar\\Programiranje u Javi 1\\Projektni_zadatak\\JavaProject\\src\\resources\\gradient-bg-1024x576.png")); // NOI18N

        jLabel4.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel4.setText("Description:");

        taDescription.setColumns(20);
        taDescription.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 12)); // NOI18N
        taDescription.setLineWrap(true);
        taDescription.setRows(5);
        taDescription.setWrapStyleWord(true);
        jScrollPane4.setViewportView(taDescription);

        jLabel11.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel11.setText("Actors:");

        jLabel12.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel12.setText("Directors:");

        jLabel14.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel14.setText("Genres:");

        jLabel13.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel13.setText("All artists:");

        jLabel15.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel15.setText("All genres:");

        lsActors.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        lsActors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsActorsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lsActors);

        lsDirectors.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        lsDirectors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsDirectorsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(lsDirectors);

        lsGenres.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        lsGenres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsGenresMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(lsGenres);

        lsAllArtists.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        lsAllArtists.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsAllArtistsMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(lsAllArtists);

        lsAllGenres.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        lsAllGenres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsAllGenresMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(lsAllGenres);

        btnUpdateMovie.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        btnUpdateMovie.setText("Update Movie");
        btnUpdateMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateMovieActionPerformed(evt);
            }
        });

        btnDeleteMovie.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        btnDeleteMovie.setText("Delete Movie");
        btnDeleteMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteMovieActionPerformed(evt);
            }
        });

        jScrollPane1.setMaximumSize(new java.awt.Dimension(32767, 341));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(367, 402));
        jScrollPane1.setRequestFocusEnabled(false);

        tblMovies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMovies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMoviesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMovies);

        jLabel2.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel2.setText("Title:");

        tfTitle.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        tfTitle.setMaximumSize(new java.awt.Dimension(2147483647, 257));

        jLabel5.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel5.setText("Original title:");

        tfOriginalTitle.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        tfOriginalTitle.setMaximumSize(new java.awt.Dimension(2147483647, 257));

        jLabel3.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel3.setText("Date published:");

        jLabel7.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel7.setText("Link:");

        tfPublishedDate.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        tfPublishedDate.setMaximumSize(new java.awt.Dimension(2147483647, 257));
        tfPublishedDate.setName("Date"); // NOI18N

        jLabel6.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel6.setText("Poster path:");

        tfPicturePath.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        tfPicturePath.setMaximumSize(new java.awt.Dimension(2147483647, 257));

        tfLink.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        tfLink.setMaximumSize(new java.awt.Dimension(2147483647, 257));

        lblTitleError.setForeground(new java.awt.Color(255, 0, 0));

        lblOriginalTitleError.setForeground(new java.awt.Color(255, 0, 0));

        lblDatePublishedError.setForeground(new java.awt.Color(255, 0, 0));

        lblPicturePathError.setForeground(new java.awt.Color(255, 0, 0));

        lblLinkError.setForeground(new java.awt.Color(255, 0, 0));

        lblDescriptionError.setForeground(new java.awt.Color(255, 0, 0));

        jLabel8.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        jLabel8.setText("Duration:");

        tfDuration.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N

        lblDurationError.setForeground(new java.awt.Color(255, 0, 0));

        btnRemoveActor.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        btnRemoveActor.setText("Remove Actor");
        btnRemoveActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActorActionPerformed(evt);
            }
        });

        btnRemoveGenre.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        btnRemoveGenre.setText("Remove Genre");
        btnRemoveGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveGenreActionPerformed(evt);
            }
        });

        btnRemoveDirector.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        btnRemoveDirector.setText("Remove Director");
        btnRemoveDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveDirectorActionPerformed(evt);
            }
        });

        btnDeleteArtist.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        btnDeleteArtist.setText("Delete Artist");
        btnDeleteArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteArtistActionPerformed(evt);
            }
        });

        btnDeleteGenre.setFont(new java.awt.Font("Yu Gothic UI Semilight", 0, 14)); // NOI18N
        btnDeleteGenre.setText("Delete Genre");
        btnDeleteGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteGenreActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        miNewMovie.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        miNewMovie.setText("New Movie");
        miNewMovie.setToolTipText("Create a new Movie");
        miNewMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewMovieActionPerformed(evt);
            }
        });
        jMenu1.add(miNewMovie);

        miNewActor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        miNewActor.setText("New Actor");
        miNewActor.setToolTipText("Add new Actor to the selected Movie");
        miNewActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActorActionPerformed(evt);
            }
        });
        jMenu1.add(miNewActor);

        miNewDirector.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        miNewDirector.setText("New Director");
        miNewDirector.setToolTipText("Add new Director to the selected Movie");
        miNewDirector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewDirectorActionPerformed(evt);
            }
        });
        jMenu1.add(miNewDirector);

        miNewGenre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        miNewGenre.setText("New Genre");
        miNewGenre.setToolTipText("Add new Genre to the selected Movie");
        miNewGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewGenreActionPerformed(evt);
            }
        });
        jMenu1.add(miNewGenre);

        miExit.setText("Exit");
        miExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExitActionPerformed(evt);
            }
        });
        jMenu1.add(miExit);

        jMenuBar1.add(jMenu1);

        menuEdit.setText("Edit");

        miEditArtist.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK));
        miEditArtist.setText("Edit Artist");
        miEditArtist.setToolTipText("Edit the selected Artist");
        miEditArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditArtistActionPerformed(evt);
            }
        });
        menuEdit.add(miEditArtist);

        miEditGenre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.SHIFT_MASK));
        miEditGenre.setText("Edit Genre");
        miEditGenre.setToolTipText("Edit the selected Genre");
        miEditGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miEditGenreActionPerformed(evt);
            }
        });
        menuEdit.add(miEditGenre);

        jMenuBar1.add(menuEdit);

        miExport.setText("XML");

        miImport.setText("Import");
        miImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miImportActionPerformed(evt);
            }
        });
        miExport.add(miImport);

        miExportInXml.setText("Export");
        miExportInXml.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExportInXmlActionPerformed(evt);
            }
        });
        miExport.add(miExportInXml);

        jMenuBar1.add(miExport);

        menuAdmin.setText("Admin");

        miAdminWindow.setText("Admin Window");
        miAdminWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAdminWindowActionPerformed(evt);
            }
        });
        menuAdmin.add(miAdminWindow);

        jMenuBar1.add(menuAdmin);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdateMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteArtist)))
                    .addComponent(btnDeleteGenre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(tfTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(tfOriginalTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(tfPublishedDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblDatePublishedError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblPicturePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(lblLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(tfDuration)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(btnRemoveActor, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE))
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(btnRemoveDirector, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addComponent(btnRemoveGenre, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {tfOriginalTitle, tfPicturePath, tfPublishedDate, tfTitle});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnDeleteArtist, btnDeleteGenre});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblDescriptionError, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfOriginalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblOriginalTitleError, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfPublishedDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDatePublishedError, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfPicturePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPicturePathError, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfLink, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblLinkError, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfDuration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDurationError, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdateMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(jLabel13))
                    .addComponent(jLabel12)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnDeleteArtist)
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnRemoveGenre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRemoveDirector, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnRemoveActor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDeleteGenre)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnDeleteMovie, btnUpdateMovie});

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdateMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateMovieActionPerformed
        try {
            if (selectedMovie != null) {
                if (!formValid()) {
                    return;
                }
                
                Movie data = new Movie(
                tfTitle.getText().trim(),
                LocalDateTime.parse(tfPublishedDate.getText().trim(), Movie.DATE_FORMATTER),
                taDescription.getText().trim(),
                tfOriginalTitle.getText().trim(),
                Integer.valueOf(tfDuration.getText().trim()),
                tfPicturePath.getText().trim(),
                tfLink.getText().trim());
                
                repository.updateMovie(selectedMovie.getId(), data);
                
                /*newActors.forEach(a -> {
                    try {
                        repository.createActor(selectedMovie.getId(), a);
                    } catch (Exception ex) {
                        Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                        MessageUtils.showErrorMessage("Error", "Unable to add the new actor to the selected movie!");
                    }
                });
                newActors.clear();
                
                newDirectors.forEach(d -> {
                    try {
                        repository.createDirector(selectedMovie.getId(), d);
                    } catch (Exception ex) {
                        Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                        MessageUtils.showErrorMessage("Error", "Unable to add the new director to the selected movie!");
                    }
                });
                newDirectors.clear();
                
                newGenreMovies.forEach(g -> {
                    try {
                        repository.addGenreToMovie(selectedMovie.getId(), g);
                    } catch (Exception ex) {
                        Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                        MessageUtils.showErrorMessage("Error", "Unable to add the new director to the selected movie!");
                    }
                });
                newGenreMovies.clear();*/
                
                MessageUtils.showInformationMessage("Information", "Movie updated successfully!");
            } else {
                MessageUtils.showInformationMessage("No movie selected", "Select a movie to update!");
            }
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to update the movie!");
        }
    }//GEN-LAST:event_btnUpdateMovieActionPerformed

    private void btnDeleteMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteMovieActionPerformed
        if (MessageUtils.showConfirmDialog("Delete movie", "Are you sure?") == JOptionPane.YES_OPTION) {
            try {
                if (selectedMovie != null) {
                    Files.delete(Paths.get(selectedMovie.getPicturePath()));
                    repository.deleteMovie(selectedMovie.getId());
                    movieTableModel = new MovieTableModel(repository.selectMovies());
                    tblMovies.setModel(movieTableModel);
                    clearForm();
                    MessageUtils.showInformationMessage("Information", "Movie was deleted successfully!");
                } else {
                    MessageUtils.showInformationMessage("No movie selected", "Select a movie to delete!");
                }
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showInformationMessage("Error", "Unable to delete the movie!");
            }
        }
        
    }//GEN-LAST:event_btnDeleteMovieActionPerformed

    private void tblMoviesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMoviesMouseClicked
        clearForm();

        try {
            Optional<Movie> optMovie = repository.selectMovie(getSelectedMovieId());
            if (optMovie.isPresent()) {
                selectedMovie = optMovie.get();
                fillForm(selectedMovie);
            }
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load the movie!");
        }

    }//GEN-LAST:event_tblMoviesMouseClicked

    private void miExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExitActionPerformed
        this.dispose();
    }//GEN-LAST:event_miExitActionPerformed

    private void miNewDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewDirectorActionPerformed
        if (selectedMovie != null) {
            new NewDirectorDialog(this, false).setVisible(true);
        } else {
            MessageUtils.showInformationMessage("Director needs a movie", "Select a movie!");
        }
    }//GEN-LAST:event_miNewDirectorActionPerformed

    private void miNewActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewActorActionPerformed
        if (selectedMovie != null) {
            new NewActorDialog(this, false).setVisible(true);
        } else {
            MessageUtils.showInformationMessage("Actor needs a movie", "Select a movie!");
        }
    }//GEN-LAST:event_miNewActorActionPerformed

    private void miNewGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewGenreActionPerformed
        if (selectedMovie != null) {
            new NewGenreDialog(this, false).setVisible(true);
        } else {
            MessageUtils.showInformationMessage("Genre needs a movie", "Select a movie!");
        }
    }//GEN-LAST:event_miNewGenreActionPerformed

    private void lsGenresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsGenresMouseClicked
        selectedGenre = lsGenres.getSelectedValue();
        System.out.println(selectedGenre);
    }//GEN-LAST:event_lsGenresMouseClicked

    private void miEditGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditGenreActionPerformed
        if (selectedGenre != null) {
            new EditGenreDialog(this, false).setVisible(true);
        } else {
            MessageUtils.showInformationMessage("No Genre", "Select a Genre!");
        }
    }//GEN-LAST:event_miEditGenreActionPerformed

    private void lsDirectorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsDirectorsMouseClicked
        selectedDirector = selectedArtist = lsDirectors.getSelectedValue();
        System.out.println(selectedDirector);
    }//GEN-LAST:event_lsDirectorsMouseClicked

    private void lsAllArtistsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsAllArtistsMouseClicked
        selectedArtist = lsAllArtists.getSelectedValue();
        System.out.println(selectedArtist);
    }//GEN-LAST:event_lsAllArtistsMouseClicked

    private void miEditArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miEditArtistActionPerformed
        if (selectedArtist != null) {
            new EditArtistDialog(this, false).setVisible(true);
        } else {
            MessageUtils.showInformationMessage("No Artist", "Select an Artist!");
        }
    }//GEN-LAST:event_miEditArtistActionPerformed

    private void lsAllGenresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsAllGenresMouseClicked
        selectedGenre = lsAllGenres.getSelectedValue();
        System.out.println(selectedGenre);
    }//GEN-LAST:event_lsAllGenresMouseClicked

    private void miExportInXmlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExportInXmlActionPerformed
        if (MessageUtils.showConfirmDialog("Export data", "Are you sure?") == JOptionPane.YES_OPTION) {
            try {
                List<Movie> movies = repository.selectMovies();
                for (Movie movie : movies) {
                    movie.setActors(repository.selectActorsFromMovie(movie.getId()));
                    movie.setDirectors(repository.selectDirectorsFromMovie(movie.getId()));
                    movie.setGenres(repository.selectGenresFromMovie(movie.getId()));
                }
                
                JAXBUtils.save(new MovieArchive(movies), XML_FILENAME);
                MessageUtils.showInformationMessage("Export data", "Export was successful!");
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to export data!");
            }
        }
    }//GEN-LAST:event_miExportInXmlActionPerformed

    private void miImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miImportActionPerformed
        if (MessageUtils.showConfirmDialog("Import data", "Are you sure?") == JOptionPane.YES_OPTION) {
            try {
                MovieArchive movieArchive = (MovieArchive) JAXBUtils.load(MovieArchive.class, XML_FILENAME);
                
                movieTableModel = new MovieTableModel(movieArchive.getMovies());
                tblMovies.setModel(movieTableModel);
                
                MessageUtils.showInformationMessage("Import data", "Import was successful!");
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to import data!");
            }
        }
    }//GEN-LAST:event_miImportActionPerformed

    private void miNewMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewMovieActionPerformed
        new NewMovieDialog(this, false).setVisible(true);
    }//GEN-LAST:event_miNewMovieActionPerformed

    private void btnRemoveActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActorActionPerformed
        if (selectedActor == null) {
            MessageUtils.showInformationMessage("No Actor", "Select an Actor!");
            return;
        }
        
        try {
            if (repository.selectActorsFromMovie(selectedMovie.getId()).size() == 1) {
                MessageUtils.showErrorMessage("Error", "Movies must have at least one actor!");
                return;
            }
        } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Unable to get data from repository!");
        }
        
        if (MessageUtils.showConfirmDialog("Remove Actor", "Are you sure?") == JOptionPane.YES_OPTION) {
            try {
                
                repository.removeActorFromMovie(selectedActor.getId(), selectedMovie.getId());
                selectedActor = null;
                loadActorModel(selectedMovie);
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to get data from repository!");
            }
        }
    }//GEN-LAST:event_btnRemoveActorActionPerformed

    private void btnRemoveGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveGenreActionPerformed
        if (selectedGenre == null) {
            MessageUtils.showInformationMessage("No Genre", "Select a Genre!");
            return;
        }
        
        try {
            if (repository.selectGenresFromMovie(selectedMovie.getId()).size() == 1) {
                MessageUtils.showErrorMessage("Error", "Movies must have at least one genre!");
                return;
            }
        } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Unable to get data from repository!");
        }
        
        if (MessageUtils.showConfirmDialog("Remove Genre", "Are you sure?") == JOptionPane.YES_OPTION) {
            try {
                
                repository.removeGenreFromMovie(selectedGenre.getId(), selectedMovie.getId());
                selectedGenre = null;
                loadGenreModel(selectedMovie);
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to remove genre!");
            }
        }
    }//GEN-LAST:event_btnRemoveGenreActionPerformed

    private void btnRemoveDirectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveDirectorActionPerformed
        if (selectedDirector == null) {
            MessageUtils.showInformationMessage("No Director", "Select a Director!");
            return;
        }
        
        try {
            if (repository.selectDirectorsFromMovie(selectedMovie.getId()).size() == 1) {
                MessageUtils.showErrorMessage("Error", "Movies must have at least one director!");
                return;
            }
        } catch (Exception ex) {
                MessageUtils.showErrorMessage("Error", "Unable to get data from repository!");
        }
        
        if (MessageUtils.showConfirmDialog("Remove Director", "Are you sure?") == JOptionPane.YES_OPTION) {
            try {
                
                repository.removeDirectorFromMovie(selectedDirector.getId(), selectedMovie.getId());
                selectedDirector = null;
                loadDirectorModel(selectedMovie);
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to remove director!");
            }
        }
    }//GEN-LAST:event_btnRemoveDirectorActionPerformed

    private void btnDeleteArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteArtistActionPerformed
        if (selectedArtist == null) {
            MessageUtils.showInformationMessage("No Artist", "Select an Artist!");
            return;
        }
        
        if (MessageUtils.showConfirmDialog("Delete Artist", "Are you sure?") == JOptionPane.YES_OPTION) {
            
            try {
                if (repository.deletePerson(selectedArtist.getId()) == 0) {
                    loadAllArtistsModel();
                    selectedArtist = null;
                    MessageUtils.showInformationMessage("Artist deleted", "Artist successfully deleted!");
                } else {
                    //loadAllArtistsModel();
                    MessageUtils.showErrorMessage("Error", "Unable to delete artist! Artist directs or acts in a movie!");
                }
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_btnDeleteArtistActionPerformed

    private void btnDeleteGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteGenreActionPerformed
        if (selectedGenre == null) {
            MessageUtils.showInformationMessage("No Genre", "Select a Genre!");
            return;
        }
        
        if (MessageUtils.showConfirmDialog("Delete Genre", "Are you sure?") == JOptionPane.YES_OPTION) {
            
            try {
                if (repository.deleteGenre(selectedGenre.getId()) == 0) {
                    loadAllGenresModel();
                    selectedGenre = null;
                    MessageUtils.showInformationMessage("Genre deleted", "Genre successfully deleted!");
                } else {
                    //loadAllGenresModel();
                    MessageUtils.showErrorMessage("Error", "Unable to delete genre! There are movies of this genre!");
                }
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
    }//GEN-LAST:event_btnDeleteGenreActionPerformed

    private void lsActorsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsActorsMouseClicked
        selectedActor = selectedArtist = lsActors.getSelectedValue();
        System.out.println(selectedActor);
    }//GEN-LAST:event_lsActorsMouseClicked

    private void miAdminWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAdminWindowActionPerformed
        this.dispose();
        new AdminForm().setVisible(true);
    }//GEN-LAST:event_miAdminWindowActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteArtist;
    private javax.swing.JButton btnDeleteGenre;
    private javax.swing.JButton btnDeleteMovie;
    private javax.swing.JButton btnRemoveActor;
    private javax.swing.JButton btnRemoveDirector;
    private javax.swing.JButton btnRemoveGenre;
    private javax.swing.JButton btnUpdateMovie;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblDatePublishedError;
    private javax.swing.JLabel lblDescriptionError;
    private javax.swing.JLabel lblDurationError;
    private javax.swing.JLabel lblIcon;
    private javax.swing.JLabel lblLinkError;
    private javax.swing.JLabel lblOriginalTitleError;
    private javax.swing.JLabel lblPicturePathError;
    private javax.swing.JLabel lblTitleError;
    private javax.swing.JList<Person> lsActors;
    private javax.swing.JList<Person> lsAllArtists;
    private javax.swing.JList<Genre> lsAllGenres;
    private javax.swing.JList<Person> lsDirectors;
    private javax.swing.JList<Genre> lsGenres;
    private javax.swing.JMenu menuAdmin;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenuItem miAdminWindow;
    private javax.swing.JMenuItem miEditArtist;
    private javax.swing.JMenuItem miEditGenre;
    private javax.swing.JMenuItem miExit;
    private javax.swing.JMenu miExport;
    private javax.swing.JMenuItem miExportInXml;
    private javax.swing.JMenuItem miImport;
    private javax.swing.JMenuItem miNewActor;
    private javax.swing.JMenuItem miNewDirector;
    private javax.swing.JMenuItem miNewGenre;
    private javax.swing.JMenuItem miNewMovie;
    private javax.swing.JTextArea taDescription;
    private javax.swing.JTable tblMovies;
    private javax.swing.JTextField tfDuration;
    private javax.swing.JTextField tfLink;
    private javax.swing.JTextField tfOriginalTitle;
    private javax.swing.JTextField tfPicturePath;
    private javax.swing.JTextField tfPublishedDate;
    private javax.swing.JTextField tfTitle;
    // End of variables declaration//GEN-END:variables

    private void init() {
        if (!LogInForm.getUser().get().isAdministrator()) {
            menuAdmin.setVisible(false);
        }
        
        try {
            initRepository();
            initTable();
            initValidation();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to initalize the form!");
            System.exit(1);
        }
    }

    private void initRepository() throws Exception {
        repository = RepositoryFactory.getRepository();
    }

    private void initTable() throws Exception {
        tblMovies.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblMovies.setAutoCreateRowSorter(true);
        tblMovies.setRowHeight(25);
        movieTableModel = new MovieTableModel(repository.selectMovies());
        tblMovies.setModel(movieTableModel);
    }

    private void initValidation() {
        errorLabels = Arrays.asList(lblTitleError, lblOriginalTitleError, lblDatePublishedError, 
                lblLinkError, lblPicturePathError, lblDurationError, lblDescriptionError);
        validationFields = Arrays.asList(tfTitle, tfOriginalTitle, tfPublishedDate, tfLink, tfPicturePath, tfDuration,  taDescription);
    }

    private void clearForm() {
        validationFields.forEach(f -> f.setText(""));
        errorLabels.forEach(l -> l.setText(""));
        taDescription.setText("");
        
        lblIcon.setIcon(new ImageIcon(getClass().getResource("/resources/gradient-bg-1024x576.png")));
        
        actorModel.clear();
        directorModel.clear();
        allGenresModel.clear();
        allArtistsModel.clear();
        genreModel.clear();
        
        selectedMovie = null;
        selectedArtist = null;
        selectedGenre = null;
        selectedActor = null;
        selectedDirector = null;
    }

    private void fillForm(Movie movie) {
        
        loadMovieLists(movie);
        loadPoster(movie);
        loadAllArtistsModel();
        loadAllGenresModel();
        
        tfTitle.setText(movie.getTitle());
        tfOriginalTitle.setText(movie.getOriginalTitle());
        tfPublishedDate.setText(movie.getPublishedDate().format(Movie.DATE_FORMATTER));
        tfLink.setText(movie.getLink());
        tfDuration.setText(String.valueOf(movie.getDuration()));
        taDescription.setText(movie.getDescription());
    }

    private void setIcon(JLabel label, File file) {
        try {
            label.setIcon(IconUtils.createIcon(file.getAbsolutePath(),label.getWidth(), label.getHeight()));
        } catch (IOException ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to set the move poster!");
        }
    }

    private void loadAllArtistsModel() {
        
        try {
            allArtistsModel.clear();
            repository.selectPeople().forEach(p -> allArtistsModel.addElement(p));
            lsAllArtists.setModel(allArtistsModel);
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load all artists!");
        }
    }
    
    private void loadAllGenresModel() {
        
        try {
            allGenresModel.clear();
            repository.selectGenres().forEach(g -> allGenresModel.addElement(g));
            lsAllGenres.setModel(allGenresModel);
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load all genres!");
        }
    }

    private void initDragNDrop() {
        
        lsAllArtists.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllArtists.setDragEnabled(true);
        lsAllArtists.setTransferHandler(new PersonExportTransferHandler());
        
        lsAllGenres.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsAllGenres.setDragEnabled(true);
        lsAllGenres.setTransferHandler(new GenreExportTransferHandler());
        
        lsActors.setDropMode(DropMode.ON);
        lsActors.setTransferHandler(new ActorImportTransferHandler());
        
        lsDirectors.setDropMode(DropMode.ON);
        lsDirectors.setTransferHandler(new DirectorImportTransferHandler());
        
        lsGenres.setDropMode(DropMode.ON);
        lsGenres.setTransferHandler(new GenreImportTransferHandler());
    }

    private void loadPoster(Movie movie) {
        
        if (Files.exists(Paths.get(movie.getPicturePath()))) {
            try {
                setIcon(lblIcon, new File(movie.getPicturePath()));
            } catch (Exception e) {
                MessageUtils.showErrorMessage("Error", "Movie poster file is not valid!");
            }
            
            tfPicturePath.setText(movie.getPicturePath());
        } else {
            tfPicturePath.setText("");
            lblIcon.setIcon(new ImageIcon(getClass().getResource("\\src\\resources")));
        }
    }

    private int getSelectedMovieId() {
        int selectedRow = tblMovies.getSelectedRow();
        int rowIndex = tblMovies.convertRowIndexToModel(selectedRow);
        int selectedMovieId = (int) movieTableModel.getValueAt(rowIndex, 0);
        return selectedMovieId;
    }

    private boolean formValid() {
        boolean ok = true;
        
         for (int i = 0; i < validationFields.size(); i++) {
            ok &= !validationFields.get(i).getText().trim().isEmpty();
            errorLabels.get(i).setText(validationFields.get(i).getText().trim().isEmpty() ? "*" : "");

            if ("Date".equals(validationFields.get(i).getName())) {
                try {
                    LocalDate.parse(validationFields.get(i).getText().trim(), Movie.DATE_FORMATTER);
                    errorLabels.get(i).setText("");
                } catch (Exception e) {
                    ok = false;
                    errorLabels.get(i).setText("*");
                }
            }
        }
         
        return ok;
    }

    boolean createNewMovie(Movie movie) throws Exception {
        
        if (repository.createMovie(movie) != 0) {
            movieTableModel = new MovieTableModel(repository.selectMovies());
            tblMovies.setModel(movieTableModel);
            return true;
        }
        return false;
    }

    private void loadMovieLists(Movie movie) {
        
        try {
            
            loadActorModel(movie);
            
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load actors to movie!");
        }
        try {
            
            loadDirectorModel(movie);
            
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load directors to movie!");
        }
        try {
            
            loadGenreModel(movie);
            
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Error", "Unable to load genres to movie!");
        }
    }

    boolean createNewArtist(Person person) throws Exception {
        if (repository.createPerson(person) != 0) {
            loadAllArtistsModel();
            return true;
        }
        return false;
    }

    boolean addNewActor(Person person) throws Exception {
        if (repository.createActor(selectedMovie.getId(), person) != 0) {
            loadActorModel(selectedMovie);
            loadAllArtistsModel();
            return true;
        }
        return false;
    }

    private void loadActorModel(Movie movie) throws Exception {
        movie.setActors(repository.selectActorsFromMovie(movie.getId()));
        actorModel.clear();
        movie.getActors().forEach(a -> actorModel.addElement(a));
        lsActors.setModel(actorModel);
    }

    boolean addNewDirector(Person person) throws Exception {
        if (repository.createDirector(selectedMovie.getId(), person) != 0) {
            loadDirectorModel(selectedMovie);
            loadAllArtistsModel();
            return true;
        }
        return false;
    }

    private void loadDirectorModel(Movie movie) throws Exception {
        movie.setDirectors(repository.selectDirectorsFromMovie(movie.getId()));
        directorModel.clear();
        movie.getDirectors().forEach(a -> directorModel.addElement(a));
        lsDirectors.setModel(directorModel);
    }

    boolean addNewGenre(Genre genre) throws Exception {
        if (repository.createGenre(selectedMovie.getId(), genre) != 0) {
            loadGenreModel(selectedMovie);
            loadAllGenresModel();
            return true;
        }
        return false;
    }

    private void loadGenreModel(Movie movie) throws Exception {
        movie.setGenres(repository.selectGenresFromMovie(movie.getId()));
        genreModel.clear();
        movie.getGenres().forEach(g -> genreModel.addElement(g));
        lsGenres.setModel(genreModel);
    }

    boolean editGenre(Genre genre) throws Exception {
        if (repository.selectGenre(genre) == 0) {
            repository.updateGenre(selectedGenre.getId(), genre);
            loadGenreModel(selectedMovie);
            loadAllGenresModel();
            return true;
        } else {
            return false;
        }
    }

    boolean editArtist(Person person) throws Exception {
        if (repository.selectPerson(person) == 0) {
            repository.updatePerson(selectedArtist.getId(), person);
            loadActorModel(selectedMovie);
            loadDirectorModel(selectedMovie);
            loadAllArtistsModel();
            return true;
        } else {
            return false;
        }
    }

    private class PersonExportTransferHandler extends TransferHandler{

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new PersonTransferable(lsAllArtists.getSelectedValue());
        }

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }
    }
    
    private class GenreExportTransferHandler extends TransferHandler{

        @Override
        protected Transferable createTransferable(JComponent c) {
            return new GenreTransferable(lsAllGenres.getSelectedValue());
        }

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }
    }
    
    private class ActorImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person person = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                
                /*Set<Person> actorsSet = Arrays.asList((Person[]) actorModel.toArray()).stream().collect(Collectors.toSet());
                
                if (actorsSet.add(person)) {
                    newActors.add(person);
                    
                    List<Person> actorsList = actorsSet.stream().collect(Collectors.toList());
                    actorModel.clear();
                    actorsList.forEach(a -> actorModel.addElement(a));
                    lsActors.setModel(actorModel);
                    return true;
                }*/
                
                if (repository.createActor(selectedMovie.getId(), person) != 0) {
                    fillForm(selectedMovie);
                    return true;
                }
            }catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to drop this actor!");
            }
            return false;
        }
    }
    
    private class DirectorImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(PersonTransferable.PERSON_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Person person = (Person) transferable.getTransferData(PersonTransferable.PERSON_FLAVOR);
                
                if (repository.createDirector(selectedMovie.getId(), person) != 0) {
                    fillForm(selectedMovie);
                    return true;
                }
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to drop this director!");
            }
            return false;
        }
    }
    
    private class GenreImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferHandler.TransferSupport support) {
            return support.isDataFlavorSupported(GenreTransferable.GENRE_FLAVOR);
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport support) {
            Transferable transferable = support.getTransferable();
            try {
                Genre genre = (Genre) transferable.getTransferData(GenreTransferable.GENRE_FLAVOR);
                
                if (repository.createGenre(selectedMovie.getId(), genre) != 0) {
                    fillForm(selectedMovie);
                    return true;
                }
            } catch (Exception ex) {
                Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
                MessageUtils.showErrorMessage("Error", "Unable to drop this genre!");
            }
            return false;
        }
    }
}

